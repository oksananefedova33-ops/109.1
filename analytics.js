(function(){
    'use strict';
    
    let analyticsData = null;
    let currentDateRange = 'all';
    let dateFrom = '';
    let dateTo = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ç—É–ª–±–∞—Ä
    function addAnalyticsButton() {
        const toolbar = document.querySelector('.topbar');
        if (!toolbar || document.getElementById('btnAnalytics')) return;
        
        const btn = document.createElement('button');
        btn.type = 'button';
        btn.id = 'btnAnalytics';
        btn.className = 'btn';
        btn.innerHTML = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞';
        btn.addEventListener('click', openAnalyticsModal);
        
        const remoteSitesBtn = toolbar.querySelector('#btnRemoteSites');
        if (remoteSitesBtn && remoteSitesBtn.nextSibling) {
            toolbar.insertBefore(btn, remoteSitesBtn.nextSibling);
        } else {
            const exportBtn = toolbar.querySelector('#btnExport');
            if (exportBtn) {
                exportBtn.parentNode.insertBefore(btn, exportBtn);
            } else {
                toolbar.appendChild(btn);
            }
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    function createAnalyticsModal() {
        if (document.getElementById('analyticsBackdrop')) return;
        
        const backdrop = document.createElement('div');
        backdrop.id = 'analyticsBackdrop';
        backdrop.className = 'analytics-backdrop hidden';
        
        backdrop.innerHTML = `
            <div class="analytics-modal">
                <div class="analytics-header">
                    <div class="analytics-title">
                        üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π
                    </div>
                    <button type="button" class="analytics-close">√ó</button>
                </div>
                
                <div class="analytics-toolbar">
                    <div class="analytics-filter-group">
                        <span class="analytics-filter-label">–ü–µ—Ä–∏–æ–¥:</span>
                        <input type="date" class="analytics-date-input" id="analyticsDateFrom">
                        <span class="analytics-filter-label">‚Äî</span>
                        <input type="date" class="analytics-date-input" id="analyticsDateTo">
                        <button class="analytics-btn primary" id="analyticsApplyFilter">–ü—Ä–∏–º–µ–Ω–∏—Ç—å</button>
                    </div>
                    
                    <div class="analytics-filter-group" style="margin-left: auto;">
                        <button class="analytics-btn" data-range="today">–°–µ–≥–æ–¥–Ω—è</button>
                        <button class="analytics-btn" data-range="week">–ù–µ–¥–µ–ª—è</button>
                        <button class="analytics-btn" data-range="month">–ú–µ—Å—è—Ü</button>
                        <button class="analytics-btn" data-range="all">–í—Å–µ –≤—Ä–µ–º—è</button>
                    </div>
                    
                    <button class="analytics-btn primary" id="analyticsRefresh">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
                </div>
                
                <div class="analytics-body" id="analyticsContent">
                    <div class="analytics-loading">
                        <div class="analytics-spinner"></div>
                        <div>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(backdrop);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        backdrop.querySelector('.analytics-close').addEventListener('click', closeAnalyticsModal);
        backdrop.addEventListener('click', (e) => {
            if (e.target === backdrop) closeAnalyticsModal();
        });
        
        document.getElementById('analyticsApplyFilter').addEventListener('click', applyDateFilter);
        document.getElementById('analyticsRefresh').addEventListener('click', loadAnalytics);
        
        // –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        backdrop.querySelectorAll('[data-range]').forEach(btn => {
            btn.addEventListener('click', function() {
                setQuickRange(this.dataset.range);
            });
        });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const today = new Date();
        const monthAgo = new Date();
        monthAgo.setMonth(monthAgo.getMonth() - 1);
        
        document.getElementById('analyticsDateFrom').valueAsDate = monthAgo;
        document.getElementById('analyticsDateTo').valueAsDate = today;
    }
    
    function openAnalyticsModal() {
        createAnalyticsModal();
        document.getElementById('analyticsBackdrop').classList.remove('hidden');
        loadAnalytics();
    }
    
    function closeAnalyticsModal() {
        document.getElementById('analyticsBackdrop').classList.add('hidden');
    }
    
    function setQuickRange(range) {
        const today = new Date();
        const dateFromInput = document.getElementById('analyticsDateFrom');
        const dateToInput = document.getElementById('analyticsDateTo');
        
        let fromDate = new Date();
        
        switch(range) {
            case 'today':
                fromDate = new Date(today);
                break;
            case 'week':
                fromDate = new Date(today);
                fromDate.setDate(fromDate.getDate() - 7);
                break;
            case 'month':
                fromDate = new Date(today);
                fromDate.setMonth(fromDate.getMonth() - 1);
                break;
            case 'all':
                fromDate = new Date('2020-01-01');
                break;
        }
        
        dateFromInput.valueAsDate = fromDate;
        dateToInput.valueAsDate = today;
        currentDateRange = range;
        
        loadAnalytics();
    }
    
    function applyDateFilter() {
        const dateFromInput = document.getElementById('analyticsDateFrom');
        const dateToInput = document.getElementById('analyticsDateTo');
        
        dateFrom = dateFromInput.value;
        dateTo = dateToInput.value;
        
        loadAnalytics();
    }
    
    async function loadAnalytics() {
        const content = document.getElementById('analyticsContent');
        content.innerHTML = `
            <div class="analytics-loading">
                <div class="analytics-spinner"></div>
                <div>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</div>
            </div>
        `;
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤
            const domains = JSON.parse(localStorage.getItem('rs_domains') || '[]');
            
            if (domains.length === 0) {
                content.innerHTML = `
                    <div class="analytics-empty">
                        <div class="analytics-empty-icon">üåê</div>
                        <div>–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤</div>
                        <div style="margin-top:12px;color:#9fb2c6;font-size:13px;">
                            –î–æ–±–∞–≤—å—Ç–µ —Å–∞–π—Ç—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "üåê –ú–æ–∏ —Å–∞–π—Ç—ã"
                        </div>
                    </div>
                `;
                return;
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–º–µ–Ω–∞
            const allStats = [];
            
            for (let domain of domains) {
                try {
                    const response = await fetch('/ui/analytics/analytics-api.php', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                        body: new URLSearchParams({
                            action: 'get_stats',
                            domain: domain.url,
                            date_from: dateFrom || '',
                            date_to: dateTo || ''
                        })
                    });
                    
                    const data = await response.json();
                    
                    if (data.ok) {
                        allStats.push({
                            domain: domain.url,
                            stats: data.stats
                        });
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è', domain.url, error);
                }
            }
            
            renderAnalytics(allStats);
            
        } catch (error) {
            content.innerHTML = `
                <div class="analytics-empty">
                    <div class="analytics-empty-icon">‚ùå</div>
                    <div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</div>
                    <div style="margin-top:8px;color:#ef4444;font-size:13px;">${error.message}</div>
                </div>
            `;
        }
    }
    
    function renderAnalytics(allStats) {
        const content = document.getElementById('analyticsContent');
        
        if (allStats.length === 0) {
            content.innerHTML = `
                <div class="analytics-empty">
                    <div class="analytics-empty-icon">üìä</div>
                    <div>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</div>
                </div>
            `;
            return;
        }
        
        // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        let totalVisitors = 0;
        let totalPageviews = 0;
        let totalDownloads = 0;
        let totalClicks = 0;
        
        const countriesMap = {};
        const sourcesMap = {};
        
        allStats.forEach(domainData => {
            const s = domainData.stats;
            totalVisitors += s.unique_visitors || 0;
            totalPageviews += s.pageviews || 0;
            totalDownloads += s.downloads || 0;
            totalClicks += s.clicks || 0;
            
            // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω—ã
            if (s.countries) {
                s.countries.forEach(c => {
                    countriesMap[c.country] = (countriesMap[c.country] || 0) + c.count;
                });
            }
            
            // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            if (s.sources) {
                s.sources.forEach(src => {
                    sourcesMap[src.source] = (sourcesMap[src.source] || 0) + src.count;
                });
            }
        });
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º HTML
        let html = `
            <div class="analytics-summary">
                <div class="analytics-card">
                    <div class="analytics-card-title">üë• –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏</div>
                    <div class="analytics-card-value">${formatNumber(totalVisitors)}</div>
                    <div class="analytics-card-change positive">
                        <span>‚Üó</span> —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö
                    </div>
                </div>
                
                <div class="analytics-card">
                    <div class="analytics-card-title">üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã</div>
                    <div class="analytics-card-value">${formatNumber(totalPageviews)}</div>
                    <div class="analytics-card-change">
                        ${totalVisitors > 0 ? (totalPageviews / totalVisitors).toFixed(1) : 0} –Ω–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
                    </div>
                </div>
                
                <div class="analytics-card">
                    <div class="analytics-card-title">üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–π</div>
                    <div class="analytics-card-value">${formatNumber(totalDownloads)}</div>
                    <div class="analytics-card-change">
                        —Ñ–∞–π–ª–æ–≤
                    </div>
                </div>
                
                <div class="analytics-card">
                    <div class="analytics-card-title">üîó –ü–µ—Ä–µ—Ö–æ–¥–æ–≤</div>
                    <div class="analytics-card-value">${formatNumber(totalClicks)}</div>
                    <div class="analytics-card-change">
                        –ø–æ —Å—Å—ã–ª–∫–∞–º
                    </div>
                </div>
            </div>
            
            <div class="analytics-tabs">
                <button class="analytics-tab active" data-tab="domains">–ü–æ –¥–æ–º–µ–Ω–∞–º</button>
                <button class="analytics-tab" data-tab="countries">–ü–æ —Å—Ç—Ä–∞–Ω–∞–º</button>
                <button class="analytics-tab" data-tab="sources">–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º</button>
            </div>
            
            <div class="analytics-tab-content" data-content="domains">
                <div class="analytics-domains-grid">
                    ${allStats.map(d => renderDomainCard(d)).join('')}
                </div>
            </div>
            
            <div class="analytics-tab-content" data-content="countries" style="display:none">
                ${renderCountriesTable(countriesMap)}
            </div>
            
            <div class="analytics-tab-content" data-content="sources" style="display:none">
                ${renderSourcesTable(sourcesMap)}
            </div>
        `;
        
        content.innerHTML = html;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∞–±–æ–≤
        content.querySelectorAll('.analytics-tab').forEach(tab => {
            tab.addEventListener('click', function() {
                content.querySelectorAll('.analytics-tab').forEach(t => t.classList.remove('active'));
                this.classList.add('active');
                
                content.querySelectorAll('.analytics-tab-content').forEach(c => c.style.display = 'none');
                content.querySelector(`[data-content="${this.dataset.tab}"]`).style.display = 'block';
            });
        });
    }
    
    function renderDomainCard(domainData) {
        const s = domainData.stats;
        
        return `
            <div class="analytics-domain-card">
                <div class="analytics-domain-header">
                    <div class="analytics-domain-name">${domainData.domain}</div>
                    <div class="analytics-domain-status">
                        <div class="analytics-domain-status-dot ${s.unique_visitors > 0 ? 'online' : 'offline'}"></div>
                        ${s.unique_visitors > 0 ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
                    </div>
                </div>
                
                <div class="analytics-stats-grid">
                    <div class="analytics-stat-item">
                        <div class="analytics-stat-label">–ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏</div>
                        <div class="analytics-stat-value">${s.unique_visitors || 0}</div>
                    </div>
                    
                    <div class="analytics-stat-item">
                        <div class="analytics-stat-label">–ü—Ä–æ—Å–º–æ—Ç—Ä—ã</div>
                        <div class="analytics-stat-value">${s.pageviews || 0}</div>
                    </div>
                    
                    <div class="analytics-stat-item">
                        <div class="analytics-stat-label">–°–∫–∞—á–∏–≤–∞–Ω–∏—è</div>
                        <div class="analytics-stat-value">${s.downloads || 0}</div>
                    </div>
                    
                    <div class="analytics-stat-item">
                        <div class="analytics-stat-label">–ü–µ—Ä–µ—Ö–æ–¥—ã</div>
                        <div class="analytics-stat-value">${s.clicks || 0}</div>
                    </div>
                </div>
                
                ${renderMiniTables(s)}
            </div>
        `;
    }
    
    function renderMiniTables(stats) {
        let html = '';
        
        // –¢–æ–ø —Å—Ç—Ä–∞–Ω—ã
        if (stats.countries && stats.countries.length > 0) {
            html += `
                <table class="analytics-table">
                    <thead>
                        <tr>
                            <th>–°—Ç—Ä–∞–Ω–∞</th>
                            <th style="text-align:right">–í–∏–∑–∏—Ç—ã</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${stats.countries.slice(0, 5).map(c => `
                            <tr>
                                <td>${getCountryFlag(c.country)} ${c.country}</td>
                                <td style="text-align:right">${c.count}</td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            `;
        }
        
        // –¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        if (stats.sources && stats.sources.length > 0) {
            html += `
                <table class="analytics-table" style="margin-top:12px">
                    <thead>
                        <tr>
                            <th>–ò—Å—Ç–æ—á–Ω–∏–∫</th>
                            <th style="text-align:right">–ü–µ—Ä–µ—Ö–æ–¥—ã</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${stats.sources.slice(0, 5).map(s => `
                            <tr>
                                <td>${getSourceIcon(s.source)} ${s.source}</td>
                                <td style="text-align:right">${s.count}</td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            `;
        }
        
        return html;
    }
    
    function renderCountriesTable(countriesMap) {
        const sorted = Object.entries(countriesMap)
            .sort((a, b) => b[1] - a[1])
            .slice(0, 20);
        
        if (sorted.length === 0) {
            return '<div class="analytics-empty">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>';
        }
        
        return `
            <table class="analytics-table">
                <thead>
                    <tr>
                        <th>–°—Ç—Ä–∞–Ω–∞</th>
                        <th style="text-align:right">–í–∏–∑–∏—Ç—ã</th>
                        <th style="text-align:right">%</th>
                    </tr>
                </thead>
                <tbody>
                    ${sorted.map(([country, count]) => {
                        const total = sorted.reduce((sum, [, c]) => sum + c, 0);
                        const percent = ((count / total) * 100).toFixed(1);
                        return `
                            <tr>
                                <td>${getCountryFlag(country)} ${country}</td>
                                <td style="text-align:right">${count}</td>
                                <td style="text-align:right">${percent}%</td>
                            </tr>
                        `;
                    }).join('')}
                </tbody>
            </table>
        `;
    }
    
    function renderSourcesTable(sourcesMap) {
        const sorted = Object.entries(sourcesMap)
            .sort((a, b) => b[1] - a[1])
            .slice(0, 20);
        
        if (sorted.length === 0) {
            return '<div class="analytics-empty">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>';
        }
        
        return `
            <table class="analytics-table">
                <thead>
                    <tr>
                        <th>–ò—Å—Ç–æ—á–Ω–∏–∫</th>
                        <th style="text-align:right">–ü–µ—Ä–µ—Ö–æ–¥—ã</th>
                        <th style="text-align:right">%</th>
                    </tr>
                </thead>
                <tbody>
                    ${sorted.map(([source, count]) => {
                        const total = sorted.reduce((sum, [, c]) => sum + c, 0);
                        const percent = ((count / total) * 100).toFixed(1);
                        return `
                            <tr>
                                <td>${getSourceIcon(source)} ${source}</td>
                                <td style="text-align:right">${count}</td>
                                <td style="text-align:right">${percent}%</td>
                            </tr>
                        `;
                    }).join('')}
                </tbody>
            </table>
        `;
    }
    
    function getCountryFlag(country) {
        const flags = {
            'Russia': 'üá∑üá∫',
            'United States': 'üá∫üá∏',
            'Germany': 'üá©üá™',
            'France': 'üá´üá∑',
            'United Kingdom': 'üá¨üáß',
            'China': 'üá®üá≥',
            'Japan': 'üáØüáµ',
            'India': 'üáÆüá≥',
            'Brazil': 'üáßüá∑',
            'Canada': 'üá®üá¶',
            'Unknown': 'üåê'
        };
        return flags[country] || 'üåê';
    }
    
    function getSourceIcon(source) {
        if (source.includes('google')) return 'üîç';
        if (source.includes('yandex')) return 'üü°';
        if (source.includes('bing')) return 'üî∑';
        if (source.includes('direct')) return 'üåê';
        if (source.includes('social')) return 'üì±';
        return 'üîó';
    }
    
    function formatNumber(num) {
        if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
        if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
        return num.toString();
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    document.addEventListener('DOMContentLoaded', function() {
        addAnalyticsButton();
    });
})();